diff --git a/src/gifsicle.c b/src/gifsicle.c
index ca3f388..8d11d17 100644
--- a/src/gifsicle.c
+++ b/src/gifsicle.c
@@ -33,7 +33,6 @@ Gt_Frameset *nested_frames = 0;

 Gif_Stream *input = 0;
 const char *input_name = 0;
-static int unoptimizing = 0;

 const int GIFSICLE_DEFAULT_THREAD_COUNT = 8;
 int thread_count = 0;
@@ -326,7 +325,6 @@ const Clp_Option options[] = {
     Clp_Negate },
   { "transparent", 't', 't', COLOR_TYPE, Clp_Negate },

-  { "unoptimize", 'U', UNOPTIMIZE_OPT, 0, Clp_Negate },
   { "use-colormap", 0, USE_COLORMAP_OPT, Clp_ValString, Clp_Negate },

   { "verbose", 'V', VERBOSE_OPT, 0, Clp_Negate },
@@ -760,18 +758,6 @@ input_stream(const char *name)
     add_frame(frames, gfs, gfs->images[i]);
   def_frame = old_def_frame;

-  if (unoptimizing)
-    if (!Gif_FullUnoptimize(gfs, GIF_UNOPTIMIZE_SIMPLEST_DISPOSAL)) {
-      static int context = 0;
-      if (!context) {
-        lwarning(name, "GIF too complex to unoptimize\n"
-                 "  (The reason was local color tables or complex transparency.\n"
-                 "  Try running the GIF through %<gifsicle --colors=255%> first.)");
-        context = 1;
-      } else
-        lwarning(name, "GIF too complex to unoptimize");
-    }
-
   apply_color_transforms(input_transforms, gfs);
   gfs->refcount++;

@@ -840,62 +826,6 @@ set_new_fixed_colormap(const char *name)
     def_output_data.colormap_fixed = read_colormap_file(name, 0);
 }

-static void
-do_colormap_change(Gif_Stream *gfs)
-{
-  if (active_output_data.colormap_fixed || active_output_data.colormap_size > 0)
-    kc_set_gamma(active_output_data.colormap_gamma_type,
-                 active_output_data.colormap_gamma);
-
-  if (active_output_data.colormap_fixed)
-    colormap_stream(gfs, active_output_data.colormap_fixed,
-                    &active_output_data);
-
-  if (active_output_data.colormap_size > 0) {
-    kchist kch;
-    Gif_Colormap* (*adapt_func)(kchist*, Gt_OutputData*);
-    Gif_Colormap *new_cm;
-
-    /* set up the histogram */
-    {
-      uint32_t ntransp;
-      int i, any_locals = 0;
-      for (i = 0; i < gfs->nimages; i++)
-        if (gfs->images[i]->local)
-          any_locals = 1;
-      kchist_make(&kch, gfs, &ntransp);
-      if (kch.n <= active_output_data.colormap_size
-          && !any_locals
-          && !active_output_data.colormap_fixed) {
-        warning(1, "trivial adaptive palette (only %d colors in source)", kch.n);
-        kchist_cleanup(&kch);
-        return;
-      }
-      active_output_data.colormap_needs_transparency = ntransp > 0;
-    }
-
-    switch (active_output_data.colormap_algorithm) {
-     case COLORMAP_DIVERSITY:
-      adapt_func = &colormap_flat_diversity;
-      break;
-     case COLORMAP_BLEND_DIVERSITY:
-      adapt_func = &colormap_blend_diversity;
-      break;
-     case COLORMAP_MEDIAN_CUT:
-      adapt_func = &colormap_median_cut;
-      break;
-     default:
-      fatal_error("can't happen");
-    }
-
-    new_cm = (*adapt_func)(&kch, &active_output_data);
-    colormap_stream(gfs, new_cm, &active_output_data);
-
-    Gif_DeleteColormap(new_cm);
-    kchist_cleanup(&kch);
-  }
-}
-

 /*****
  * output GIF images
@@ -946,8 +876,7 @@ merge_and_write_frames(const char *outfile, int f1, int f2)
     verbose_open('[', outfile ? outfile : "#stdout#");
   active_output_data.active_output_name = outfile;

-  colormap_change = active_output_data.colormap_size > 0
-    || active_output_data.colormap_fixed;
+  colormap_change = 0;
   warn_local_colormaps = !colormap_change;

   if (!(active_output_data.scaling
@@ -974,8 +903,6 @@ merge_and_write_frames(const char *outfile, int f1, int f2)
                     active_output_data.scaling == GT_SCALING_RESIZE_FIT,
                     active_output_data.scale_method,
                     active_output_data.scale_colors);
-    if (colormap_change)
-      do_colormap_change(out);
     if (output_transforms)
       apply_color_transforms(output_transforms, out);
     if (active_output_data.optimizing & GT_OPT_MASK)
@@ -1408,17 +1335,6 @@ main(int argc, char *argv[])
   pthread_mutex_init(&kd3_sort_lock, 0);
 #endif

-  /* Yep, I'm an idiot.
-     GIF dimensions are unsigned 16-bit integers. I assume that these
-     numbers will fit in an 'int'. This assertion tests that assumption.
-     Really I should go through & change everything over, but it doesn't
-     seem worth my time. */
-  {
-    uint16_t m = 0xFFFFU;
-    int i = m;
-    assert(i > 0 && "configuration/lameness failure! bug the author!");
-  }
-
   while (1) {
     int opt = Clp_Next(clp);
     switch (opt) {
@@ -1755,11 +1671,6 @@ main(int argc, char *argv[])
       break;
     }

-     case UNOPTIMIZE_OPT:
-      UNCHECKED_MARK_CH(input, CH_UNOPTIMIZE);
-      unoptimizing = clp->negated ? 0 : 1;
-      break;
-
      case THREADS_OPT:
       if (clp->negated)
           thread_count = 0;
